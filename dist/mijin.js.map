{"version":3,"file":"mijin.js","sources":["../mijin.js"],"sourcesContent":["/**\r\n * @param {Function} into\r\n * @param {Function} what\r\n * @param {string} type\r\n * @param {boolean} customReturn\r\n */\r\nexport default (into, what, type = \"BEFORE\", customReturn = false) => {\r\n    if (!into || !what || !typeof what === 'function' || !typeof into === 'function') {\r\n        throw new Error(\"Invalid inject function usage!: invalid what or into\")\r\n    }\r\n\r\n    if(type === \"BEFORE\") {\r\n        if(!customReturn) {\r\n            return () => {\r\n                what.apply(into, arguments)\r\n                return into.apply(into, arguments)\r\n            }\r\n        } else if(customReturn) {\r\n            return () => {\r\n                const a = what.apply(into, arguments)\r\n                into.apply(into, arguments)\r\n                return a\r\n            }\r\n        }\r\n    } else if(type === \"AFTER\") {\r\n        if(!customReturn) {\r\n            return () => {\r\n                const a = into.apply(into, arguments)\r\n                what.apply(into, arguments)\r\n                return a\r\n            }\r\n        } else if(customReturn) {\r\n            return () => {\r\n                const a = what.apply(into, arguments)\r\n                into.apply(into, arguments)\r\n                return a\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"names":["into","what","type","customReturn","Error","apply","arguments","a"],"mappings":"oEAMe,SAACA,EAAMC,EAAMC,EAAiBC,GACzC,QADwBD,IAAAA,IAAAA,EAAO,eAAUC,IAAAA,IAAAA,GAAe,IACnDH,IAASC,EACV,MAAU,IAAAG,MAAM,wDAGpB,GAAY,WAATF,EAAmB,CAClB,IAAIC,EACA,kBAEI,OADAF,EAAKI,MAAML,EAAMM,GACVN,EAAKK,MAAML,EAAMM,EAC5B,EACMH,GAAAA,EACN,kBACI,IAAMI,EAAIN,EAAKI,MAAML,EAAMM,GAE3B,OADAN,EAAKK,MAAML,EAAMM,GACVC,CACX,CAER,MAAO,GAAY,UAATL,EAAkB,CACxB,IAAIC,EACA,OAAa,WACT,IAAMI,EAAIP,EAAKK,MAAML,EAAMM,GAE3B,OADAL,EAAKI,MAAML,EAAMM,GACVC,CACX,EACG,GAAGJ,EACN,OAAa,WACT,IAAMI,EAAIN,EAAKI,MAAML,EAAMM,GAE3B,OADAN,EAAKK,MAAML,EAAMM,GACVC,CACX,CAER,CAEH"}